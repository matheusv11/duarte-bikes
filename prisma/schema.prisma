// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// model ProductTypes {
//   id            String    @default(cuid()) @id
//   name          String
//   @@map(name: "products_types")
// }

model Bikes {
    id            String    @default(cuid()) @id
    model         String
    image         String
    quantity      Int
    rents         Rents[]
    @@map(name: "bikes")
}

model Users {
  id            String    @default(cuid()) @id
  name          String
  kind          String // Or create a admin table
  email         String    @unique
  password      String
  rents         Rents[]
  @@map(name: "users")
}

// model Schedules {
//   id              String    @default(cuid()) @id
//   start  DateTime
//   end    DateTime
//   createdAt       DateTime  @default(now()) @map(name: "created_at")
//   updatedAt       DateTime  @updatedAt @map(name: "updated_at")
//   @@map(name: "schedules")
// }

model Rents {
  id              String    @default(cuid()) @id
  value           Float
  schedule_start  DateTime
  schedule_end    DateTime
  rented          Boolean // Only to block other user to pick this bike while other is paying
  paid            Boolean
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  user  Users?    @relation(fields: [userId], references: [id])
  bike    Bikes?  @relation(fields: [bikeId], references: [id])
  bikeId  String?
  userId  String?
  @@map(name: "rents")
}

model SelledProducts {
  id            String    @default(cuid()) @id
  custom_sold_value Float?
  quantity      Int
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  product    Products?   @relation(fields: [productId], references: [id])
  productId  String?
  @@map(name: "selled_products")
}

model Products {
  id            String    @default(cuid()) @id
  name          String
  description   String?
  buyed_value   Float
  sold_value    Float
  quantity      Int
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  selledProducts         SelledProducts[]
  @@map(name: "products")
}

// model Post {
//   id        String     @default(cuid()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
// }

// model User { // Rodar
//   id            String       @default(cuid()) @id
//   name          String?
//   email         String?   @unique
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @updatedAt @map(name: "updated_at")
//   posts         Post[]
//   @@map(name: "users")
// }